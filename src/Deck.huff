#define function newDeck(uint256 cards, uint256 players) nonpayable returns ()
#define function changeDealer(uint256 id, address) nonpayable returns ()
#define function changeAddress(uint256 id, uint256 player, address) nonpayable returns ()

#define error InvalidArgument()
#define error Unauthorised()

#define constant MAX_CARDS = 0xffff
#define constant MAX_PLAYERS = 0xffff
#define constant DECKS = FREE_STORAGE_POINTER()
// Deck struct layout:
// dealer: address
// cards: uint256
// players: uint256
// addrs: address[players]
// shuffle: uint256[2][cards][players+1]
// challengeReq: uint256[players]
// challengeRes: bytes32[players]
// challengeRnd: uint256
// cards: DrawCard[cards]
// prep -- TODO: use calldata only for this
#define constant NEXT_ID = FREE_STORAGE_POINTER()

/* Methods */
#define macro NEW_DECK() = takes (0) returns (0) {
    0x04 calldataload   // [cards]
    0x0 eq              // [0 == cards]
    error jumpi         // []
    0x04 calldataload   // [cards]
    [MAX_CARDS]         // [max_cards, cards]
    gt 0x1 sub          // [max_cards <= cards]
    error jumpi         // []
    0x24 calldataload   // [players]
    0x0 eq              // [0 == players]
    error jumpi         // []
    0x24 calldataload   // [players]
    [MAX_PLAYERS]       // [max_players, players]
    lt                  // [max_players < players]
    error jumpi         // []
    [NEXT_ID] sload     // [id]
    0x00 mstore         // [] ; [id]
    [DECKS]             // [decks_ptr]
    0x20 mstore         // [] ; [id, decks_ptr]
    0x40 0x00 sha3      // [dealer_ptr]
    caller dup2         // [dealer_ptr, caller, dealer_ptr]
    sstore              // [dealer_ptr] ; [id, decks_ptr; dealer_ptr: caller]
    0x1 add             // [cards_ptr]
    0x04 calldataload   // [cards, cards_ptr]
    dup2                // [cards_ptr, cards, cards_ptr]
    sstore              // [cards_ptr] ; [id, decks_ptr; dealer_ptr: caller, cards_ptr: cards]
    0x1 add             // [players_ptr]
    0x24 calldataload   // [players, players_ptr]
    dup2 sstore         // [players_ptr] ; [id, decks_ptr; dealer_ptr: caller, cards_ptr: cards, players_ptr: players]
    0x24 calldataload   // [players, players_ptr]
    swap1               // [players_ptr, players]
    loop_players:
    0x1 add             // [addrs_ptr+i, players-i]
    caller dup2         // [addrs_ptr+i, caller, addrs_ptr+i, players-i]
    sstore              // [addrs_ptr+i, players-i] ; [... ; ..., addrs[...i] = caller]
    0x1 dup3 sub        // [players-i-1, addrs_ptr+i, players-i]
    swap2               // [players-i, addrs_ptr+i, players-i-1]
    0x1 swap1 sub       // [players-i-1, addrs_ptr+i, players-i-1]
    loop_players jumpi  // [shuffle_ptr, 0]
    pop pop             // []
    0x00 mload 0x1 add  // [id+1]
    [NEXT_ID] sstore    // [] ; [... ; ..., NEXT_ID = id+1]
    0x20 0x00 return
    error:
    __ERROR(InvalidArgument)
    0x00 mstore
    0x04 0x00 revert
}

#define macro CHANGE_DEALER() = takes (0) returns (0) {
    0x00 0x00 revert
}

#define macro CHANGE_ADDRESS() = takes (0) returns (0) {
    0x00 0x00 revert
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(newDeck) eq new jumpi
    dup1 __FUNC_SIG(changeDealer) eq dealer jumpi
    dup1 __FUNC_SIG(changeAddress) eq chaddr jumpi
    0x00 0x00 revert
    new:
    NEW_DECK()
    dealer:
    CHANGE_DEALER()
    chaddr:
    CHANGE_ADDRESS()
}
